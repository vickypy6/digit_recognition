##Fetching Dataset
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
%matplotlib inline
import numpy as np
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
len(x_train)
len(x_test)
x_train[0].shape
plt.matshow(x_train[0])
plt.matshow(x_train[1])
plt.matshow(x_train[2])
plt.matshow(x_test[1])
y_train[2]
y_train[:9]
x_train.shape
x_train = x_train/255
x_test = x_test/255
x_train_flattened = x_train.reshape(len(x_train), 28*28)
x_train_flattened.shape
x_test_flattened = x_test.reshape(len(x_test), 28*28)
x_test_flattened.shape
x_train_flattened[0]
model = keras.Sequential([
    (keras.layers.Dense(10, input_shape = (784,), activation = 'sigmoid'))
])
    
model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
             metrics=['accuracy']
             )
model.fit(x_train_flattened, y_train, epochs = 5)
plt.matshow(x_test[0])
y_predicted = model.predict(x_test_flattened)
y_predicted[0]
np.argmax(y_predicted[0])
plt.matshow(x_test[2])
np.argmax(y_predicted[2])
plt.matshow(x_test[8])
np.argmax(y_predicted[8])
plt.matshow(x_test[24])
np.argmax(y_predicted[24])
y_predicted_labels = [np.argmax(i) for i in y_predicted]
y_predicted_labels[:5]
y_test[:5]
cm = tf.math.confusion_matrix(labels = y_test, predictions = y_predicted_labels)
cm
import seaborn as sn
plt.figure(figsize=(10,7))
sn.heatmap(cm, annot=True, fmt = 'd')
plt.xlabel('Predicted')
plt.ylabel('Truth')
model = keras.Sequential([
    keras.layers.Dense(100, input_shape = (784,), activation = 'relu'),
    keras.layers.Dense(10, activation = 'sigmoid')
])

model.compile(
    optimizer = 'adam',
    loss = 'sparse_categorical_crossentropy',
    metrics = ['accuracy']
)
model.fit(x_train_flattened, y_train, epochs=5 )
y_predicted = model.predict(x_test_flattened)
y_predicted_labels = [np.argmax(i) for i in y_predicted]
cm = tf.math.confusion_matrix(labels = y_test, predictions = y_predicted_labels)

plt.figure(figsize = (10,7))
sn.heatmap(cm, annot = True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

model = keras.Sequential([
    keras.layers.Flatten(input_shape = (28,28)),
    keras.layers.Dense(100, activation = 'relu'),
    keras.layers.Dense(10, activation = 'sigmoid')
])

model.compile(
    optimizer = 'adam',
    loss = 'sparse_categorical_crossentropy',
    metrics = ['accuracy']
)
model.fit(x_train, y_train, epochs = 5)
